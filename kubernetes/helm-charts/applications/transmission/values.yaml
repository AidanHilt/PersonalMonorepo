#================================================================================================================================================
# You should be able to use any of the values you can find here: https://github.com/bjw-s/helm-charts/blob/main/charts/library/common/values.yaml
#================================================================================================================================================
image:
  repository: haugene/transmission-openvpn
  pullPolicy: IfNotPresent

# initContainers:
#   populate-config:
#     image: dwdraju/alpine-curl-jq
#     command: ["bash", "-c"]
#     args:
#       - |
#         echo -E "$(jq -r '.["download-dir"] = {{ .Values.env.TRANSMISSION_DOWNLOAD_DIR }}' /config/settings.json)" > /config/settings.json
#     volumeMounts:
#       - name: config
#         mountPath: /config

env:
  # -- Set the container timezone
  TZ: UTC
  # -- Path in container where the Web UI is located
  TRANSMISSION_WEB_HOME: ""
  # -- Password to access the Web UI
  TRANSMISSION_RPC_PASSWORD: ""
  # -- Torrent download directory
  TRANSMISSION_DOWNLOAD_DIR: /downloads/
  # -- Enable incomplete download directory
  TRANSMISSION_INCOMPLETE_DIR_ENABLED: false
  # -- Incomplete download directory
  TRANSMISSION_INCOMPLETE_DIR: /downloads/incomplete
  # -- Enable watch directory
  TRANSMISSION_WATCH_DIR_ENABLED: false
  # -- Watch directory
  TRANSMISSION_WATCH_DIR: /watch

service:
  main:
    ports:
      http:
        port: 80
        targetPort: 9091
  utptcp:
    enabled: false
    type: ClusterIP
    ports:
      utptcp:
        enabled: true
        port: 51413
        protocol: TCP
        targetPort: 51413
  utpudp:
    enabled: false
    type: ClusterIP
    ports:
      utpudp:
        enabled: true
        port: 51413
        protocol: UDP
        targetPort: 51413

# -- Configures the probes for the main Pod.
# @default -- See values.yaml
## transmission runs the GUI and I/O on the same thread.
## Heavy bandwith usage may stall the UI and result in restarts.
probes:
  liveness:
    spec:
      timeoutSeconds: 30
  readiness:
    spec:
      timeoutSeconds: 30

ingress:
  # -- Enable and configure ingress settings for the chart under this key.
  # @default -- See values.yaml
  main:
    enabled: false

# -- Configure persistence settings for the chart under this key.
# @default -- See values.yaml
persistence:
  downloads:
    enabled: false
    mountPath: /downloads

  watch:
    enabled: false
    mountPath: /watch

transmission:
  alternateUi:
    enabled: false
    uiLocation: https://github.com/johman10/flood-for-transmission/releases/download/latest/flood-for-transmission.tar.gz

vpn:
  enabled: false
  image:
    # -- Specify the openvpn client image
    repository: ghcr.io/utkuozdemir/dperson-openvpn-client
    # -- Specify the openvpn client image tag
    tag: latest
    # -- Specify the openvpn client image pull policy
    pullPolicy: IfNotPresent

  # -- Credentials to connect to the VPN Service (used with -a)
  auth: # "user;password"
  # -- Optionally specify an existing secret that contains the credentials.
  # Credentials should be stored under the `VPN_AUTH` key
  authSecret: # my-vpn-secret

  # -- Set the VPN container securityContext
  # @default -- See values.yaml
  securityContext:
    privileged: true
    capabilities:
      add:
        - NET_ADMIN
        - SYS_MODULE

  # -- All variables specified here will be added to the vpn sidecar container
  # See the documentation of the VPN image for all config values
  env:
    {}
    # TZ: UTC

  # -- Override the args for the vpn sidecar container
  args: []

  # -- Provide a customized vpn configuration file to be used by the VPN.
  # configFile: |-
  # Some Example Config
  # remote greatvpnhost.com 8888
  # auth-user-pass
  # Cipher AES

  # -- Reference an existing secret that contains the VPN configuration file
  # The chart expects it to be present under the `vpnConfig` key.
  configFileSecret:

  # -- Provide custom up/down scripts that can be used by the vpn configuration.
  # @default -- See values.yaml
  scripts:
    # @default -- See below
    up: ""
    #up: |-
    # #!/bin/bash
    # echo "connected" > /shared/vpnstatus

    # @default -- See below
    down: ""
    #down: |-
    # #!/bin/bash
    # echo "disconnected" > /shared/vpnstatus

  additionalVolumeMounts: []

  # -- Optionally specify a livenessProbe, e.g. to check if the connection is still
  # being protected by the VPN
  livenessProbe:
    {}
    # exec:
    #   command:
    #     - sh
    #     - -c
    #     - if [ $(curl -s https://ipinfo.io/country) == 'US' ]; then exit 0; else exit $?; fi
    # initialDelaySeconds: 30
    # periodSeconds: 60
    # failureThreshold: 1

  networkPolicy:
    # -- If set to true, will deploy a network policy that blocks all outbound
    # traffic except traffic specified as allowed
    enabled: false

    # -- Provide additional annotations which may be required.
    annotations: {}

    # -- Provide additional labels which may be required.
    labels: {}

    # -- Provide additional podSelector labels which may be required.
    podSelectorLabels: {}

    # -- The egress configuration for your network policy, All outbound traffic
    # from the pod will be blocked unless specified here.
    # [[ref]](https://kubernetes.io/docs/concepts/services-networking/network-policies/)
    # [[recipes]](https://github.com/ahmetb/kubernetes-network-policy-recipes)
    egress:
      # - to:
      #   - ipBlock:
      #       cidr: 0.0.0.0/0
      #   ports:
      #   - port: 53
      #     protocol: UDP
      #   - port: 53
      #     protocol: TCP
