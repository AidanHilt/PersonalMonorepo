{{- include "bjw-s.common.loader.init" . }}

{{/* Append the hardcoded settings */}}
{{- define "radarr.harcodedValues" -}}
env:
  - name: RADARR__AUTH__APIKEY
    valueFrom:
      secretKeyRef:
        {{ $defaultSecretName := printf "%v-%v" .Release.Name "config-secret"}}
        name: {{ .Values.RADARR.configSecret.existingSecret | default $defaultSecretName}}
        key: apiKey
  - name: RADARR__SERVER__URLBASE
    value: {{ .Values.RADARR.urlBase }}
  {{ if .Values.RADARR.postgres.enabled }}
  - name: RADARR__POSTGRES__HOST
    value: {{ .Values.RADARR.postgres.host }}
  - name: RADARR__POSTGRES__MAINDB
    value: {{ .Values.RADARR.postgres.mainDb }}
  - name: RADARR__POSTGRES__LOGDB
    value: {{ .Values.RADARR.postgres.logDb }}
  - name: RADARR__POSTGRES__PORT
    value: {{ .Values.RADARR.postgres.port | quote }}
  - name: RADARR__POSTGRES__USER
    value: {{ .Values.RADARR.postgres.username }}
  - name: RADARR__POSTGRES__PASSWORD
    valueFrom:
      secretKeyRef:
        name: radarr-config-secret
        key: postgresPassword
  {{ end }}

{{- if eq .Values.radarr.configSecret.existingSecret "" }}
secrets:
  config-secret:
    enabled: true
    stringData:
      {{- if .Values.radarr.postgres.enabled }}
      postgresPassword: {{ .Values.radarr.postgres.password | quote }}
      postgresMasterPassword: {{ index (lookup "v1" "Secret" "postgres" "postgres-postgresql") "data" "postgres-password" | b64dec | quote }}
      {{- end }}
      apiKey: {{ .Values.radarr.apiKey | default (randAlphaNum 32 | lower) | quote }}
{{- end }}

{{ if not .Values.persistence.config.enabled }}
persistence:
  config:
    enabled: true
    mountPath: /config
    type: emptyDir
{{ end }}

{{ if .Values.radarr.metrics.enabled }}
additionalContainers:
  exporter:
    name: exporter
    image: "{{ .Values.radarr.metrics.exporter.image.repository }}:{{ .Values.radarr.metrics.exporter.image.tag }}"
    imagePullPolicy: {{ .Values.radarr.metrics.exporter.image.pullPolicy }}
    args: ["radarr"]
    env:
      - name: URL
        value: "http://localhost"
      - name: CONFIG
        value: "/config/config.xml"
      - name: PORT
        value: "{{ .Values.radarr.metrics.exporter.env.port }}"
      - name: ENABLE_ADDITIONAL_METRICS
        value: "{{ .Values.radarr.metrics.exporter.env.additionalMetrics }}"
      - name: ENABLE_UNKNOWN_QUEUE_ITEMS
        value: "{{ .Values.radarr.metrics.exporter.env.unknownQueueItems }}"
    ports:
      - name: metrics
        containerPort: {{ .Values.radarr.metrics.exporter.env.port }}
    volumeMounts:
      - name: config
        mountPath: /config
        readOnly: true
        {{ if .Values.persistence.config.subPath }}
        subPath: {{ .Values.persistence.config.subPath }}
        {{ end }}

service:
  metrics:
    enabled: true
    ports:
      metrics:
        enabled: true
        protocol: TCP
        port: 80
        targetPort: {{ .Values.radarr.metrics.exporter.env.port }}

serviceMonitor:
  main:
    enabled: true
    serviceName: '{{ include "bjw-s.common.lib.chart.names.fullname" $ }}-metrics'
    endpoints:
    - port: metrics
      scheme: http
      path: /metrics
      interval: {{ .Values.radarr.metrics.serviceMonitor.interval }}
      scrapeTimeout: {{ .Values.radarr.metrics.serviceMonitor.scrapeTimeout }}
{{ end }}

{{- end -}}
{{- $_ := mergeOverwrite .Values (include "radarr.harcodedValues" . | fromYaml) -}}
{{ include "bjw-s.common.loader.generate" . }}